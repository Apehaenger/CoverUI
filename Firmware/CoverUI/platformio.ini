; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


;****************************************************************************
; Some remarks:                                                             *
; - OM's original CoverUI is Pico-SDK based and get compiled via cmake/make *
; - Stock CoverUI is available in (yet) two MCU variants:                   *
;   STM32F030R8T6 and GD32F330R8T6 they do have different Cortex cores.     *
;   The (yet) only common framework which support both MCU's is 'arduino'.  *
;   Unfortunately framework-arduino[gd32] which partly vary in API.         *
; - 'Semihosting' (printf() output via ST-Link debugger), is NOT yet        *
;   supported in arduino framework                                          *
; - GD32's CMSIS files do have a hardcoded clock selection which isn't      *
;   configurable and need to be modded manually in:                         *
;   <PIO home>/packages/framework-arduinogd32/system/GD32F3x0_firmware/...  *
;   .../CMSIS/GD/GD32F3x0/Source/system_gd32f3x0.c#L45-L54                  *
;****************************************************************************

[platformio]
src_dir = .


[env]
platform = ststm32
board = disco_f030r8 ; Default STM32F030x8 MCU
framework = arduino

build_src_filter =
  +<*>
  -<buttonscan.cpp>
  -<LEDcontrol.cpp>
  -<statemachine.cpp>
  -<build/*>
  -<yfc500/stm32cube/*>

build_flags =
  -DHW_YFC500


[env:YFC500-STM32_STLink]
build_flags =
  ${env.build_flags}
  -DMCU_STM32

upload_protocol = stlink
upload_flags =
  -f
  yfc500/util/stlink.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_tool = stlink
debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  yfc500/util/stlink.cfg
  -c
  reset_config none separate


[env:YFC500-STM32_Picoprobe]
build_flags =
  ${env.build_flags}
  -DMCU_STM32

; Need at least openocd 0.11 for working CMSIS-DAP adapter detection
platform_packages = platformio/tool-openocd@^2.1100.211028

; Picoprobe (RP2040) = CMSIS-DAP
upload_protocol = cmsis-dap
upload_flags =
  -f
  yfc500/util/picoprobe.cfg

upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

; Picoprobe (RP2040) = CMSIS-DAP
debug_tool = cmsis-dap
debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  yfc500/util/picoprobe.cfg
  -c
  reset_config none separate

; ---------------------------------------------
;            GD32 MCU
; ---------------------------------------------

[env:YFC500-GD32_STLink]
platform = https://github.com/CommunityGD32Cores/platform-gd32.git
platform_packages = 
    framework-arduinogd32@https://github.com/CommunityGD32Cores/ArduinoCore-GD32.git
board = genericGD32F330R8 ; Alternative GD32F330R8T6 MCU

build_flags =
  ${env.build_flags}
  -DMCU_GD32
  
upload_protocol = stlink
upload_flags =
  -f
  yfc500/util/stlink.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f3x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_tool = stlink
debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  yfc500/util/stlink.cfg
  -c
  reset_config none separate
