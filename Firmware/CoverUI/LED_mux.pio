;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

/*

LA1 = SIN       = GP 10 = PIN 14
LA2 = BLANK     = GP 11 = PIN 15
LA3 = LAT       = GP 12 = PIN 16
LA4 = SCLK      = GP 13 = PIN 17


Byte to output : 0b00010101 rihht shift 8 bit

Bitstream pin_SIN:     _|---|___|---|___|---|__________________________
pin_SCLK;               __|-|_|-|_|-|_|-|_|-|_|-|_|-|_|-|_______________
pin_LAT:                _________________________________ |--|__________
pin_BLANK:              -|______________________________________________



31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0  
 x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 |    0   |  |    0   |  |    0   |  |   0    |  |   0    |  |   0    |  |   0    |  |   0    |

*/


.define public PIN_SIN      10
.define public PIN_BLANK    11
.define public PIN_LAT      12
.define public PIN_SCLK     13

.define public SM_CYCLE   1000000     // State machine cycle frequency
 



.program LED_mux

.side_set 1 opt 



.wrap_target

    set PINS 0
serialout:
    out pins, 1 side 0 [1]  ; Shift 1 bit from OSR to the first OUT pin
    set PINS, 2
    JMP !OSRE serialout
    set PINS, 1 [1]


.wrap    


% c-sdk {
#include "hardware/clocks.h"

void static inline LED_mux_program_init(PIO pio, uint sm, uint offset, uint pin_SIN, uint freq) 
{
    
    // set pins and prindirs for init 
    pio_sm_set_pins_with_mask(pio, sm,0x0000,0x3c00 );
    pio_sm_set_pindirs_with_mask(pio, sm, 0x3c01,0x3c01);


    // init pin for pio
    pio_gpio_init(pio, PIN_SIN);
    pio_gpio_init(pio, PIN_BLANK);
    pio_gpio_init(pio, PIN_LAT);
    pio_gpio_init(pio, PIN_SCLK);

    // config properties
    pio_sm_config c = LED_mux_program_get_default_config(offset);

    // OUT shifts to right, autopull shift 18 bits
    sm_config_set_out_shift(&c, true, true, 18);

    // We are mapping both OUT and side-set to the same pin, because sometimes
    // we need to assert user data onto the pin (with OUT) and sometimes
    // assert constant values (start/stop bit)

    sm_config_set_out_pins(&c, PIN_SIN, 1);
    sm_config_set_sideset_pins(&c, PIN_SCLK);
    sm_config_set_set_pins(&c, PIN_LAT,2);

    // We only need TX, so get an 8-deep FIFO!
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // define sm cycletime reduce with counter div  125 000 000 is factor 1
    float div = (float)clock_get_hz(clk_sys) / (freq);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}


%}

